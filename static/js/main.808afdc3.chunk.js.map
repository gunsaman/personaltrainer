{"version":3,"sources":["component/AddCustomer.js","component/ModifyCustomer.js","component/AddTraining.js","component/CustomerList.js","component/NavBar.js","component/TrainingList.js","component/Calendar.js","component/Statistics.js","App.js","reportWebVitals.js","index.js"],"names":["AddCustomer","props","useState","isOpen","setIsOpen","firstname","lastname","streetaddress","postcode","city","email","phone","customer","setCustomer","handleClose","inputChanged","event","target","name","value","Button","variant","color","onClick","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","TextField","autoFocus","onChange","margin","label","fullWidth","DialogActions","newCustomer","ModifyCustomer","React","size","console","log","params","data","updateCustomer","links","href","AddTraining","Date","date","setDate","activity","duration","training","setTraining","fontSize","required","toISOString","inputDate","addTraining","CustomerList","customers","setCustomers","message","setMessage","gridRef","useRef","customerDataApi","useEffect","getCustomer","fetch","then","response","json","content","catch","error","modifyCustomer","link","method","headers","body","JSON","stringify","_","err","columns","headerName","field","sortable","floatingFilter","filter","width","cellRendererFramework","deleteLink","window","confirm","style","textAlign","className","height","marginLeft","ref","onGridReady","current","api","columnDefs","rowData","pagination","paginationPageSize","suppressSizeToFit","Snackbar","autoHideDuration","NavBar","sidebar","setSidebar","SidebarData","title","path","icon","cName","showSidebar","Provider","to","map","item","index","Trainingslist","trainings","setTrainings","getTrainings","resizable","moment","utc","format","sizeColumnsToFit","suppressCellSelection","BigCalendar","showEvents","marginRight","plugins","dayGridPlugin","initialView","headerToolbar","left","center","right","App","exact","component","TrainingList","ShowCalendar","Statistics","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"+VAQe,SAASA,EAAYC,GAAQ,IAAD,EAEXC,oBAAS,GAFE,mBAEhCC,EAFgC,KAExBC,EAFwB,OAGPF,mBAAS,CACrCG,UAAW,GACXC,SAAU,GACVC,cAAe,GACfC,SAAU,GACVC,KAAM,GACNC,MAAO,GACPC,MAAO,KAV4B,mBAGhCC,EAHgC,KAGtBC,EAHsB,KAiBjCC,EAAc,WAClBV,GAAU,IAGNW,EAAc,SAACC,GACjBH,EAAY,2BAAID,GAAL,kBAAgBI,EAAMC,OAAOC,KAAMF,EAAMC,OAAOE,UAS/D,OACI,gCACE,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QApB1B,WACtBnB,GAAU,IAmBN,gCAGA,eAACoB,EAAA,EAAD,CACEC,KAAMtB,EACNuB,QAASZ,EACTa,kBAAgB,qBAChBC,mBAAiB,2BAJnB,UAME,cAACC,EAAA,EAAD,CAAaC,GAAG,qBAAhB,8BACA,eAACC,EAAA,EAAD,WAEI,cAACC,EAAA,EAAD,CACAC,WAAS,EACTf,KAAM,YACNC,MAAOP,EAASP,UAChB6B,SAAUnB,EACVoB,OAAO,QACPC,MAAM,YACNC,WAAS,IAET,cAACL,EAAA,EAAD,CACAd,KAAM,WACNC,MAAOP,EAASN,SAChB4B,SAAUnB,EACVoB,OAAO,QACPC,MAAM,WACNC,WAAS,IAET,cAACL,EAAA,EAAD,CACAd,KAAM,gBACNC,MAAOP,EAASL,cAChB2B,SAAUnB,EACVoB,OAAO,QACPC,MAAM,iBACNC,WAAS,IAET,cAACL,EAAA,EAAD,CACAd,KAAM,WACNC,MAAOP,EAASJ,SAChB0B,SAAUnB,EACVoB,OAAO,QACPC,MAAM,WACNC,WAAS,IAET,cAACL,EAAA,EAAD,CACAd,KAAM,OACNC,MAAOP,EAASH,KAChByB,SAAUnB,EACVoB,OAAO,QACPC,MAAM,OACNC,WAAS,IAET,cAACL,EAAA,EAAD,CACAd,KAAM,QACNC,MAAOP,EAASF,MAChBwB,SAAUnB,EACVoB,OAAO,QACPC,MAAM,QACNC,WAAS,IAER,cAACL,EAAA,EAAD,CACDd,KAAM,QACNC,MAAOP,EAASD,MAChBuB,SAAUnB,EACVoB,OAAO,QACPC,MAAM,QACNC,WAAS,OAGb,eAACC,EAAA,EAAD,WACE,cAAClB,EAAA,EAAD,CAAQG,QAAST,EAAaQ,MAAM,UAApC,oBAGA,cAACF,EAAA,EAAD,CAAQG,QAjFA,WACdtB,EAAMsC,YAAY3B,GAClBE,KA+EmCQ,MAAM,UAAUW,WAAS,EAAtD,2BC1GC,SAASO,EAAevC,GAAQ,IAAD,EAEdwC,IAAMvC,UAAS,GAFD,mBAEnCC,EAFmC,KAE3BC,EAF2B,OAGVqC,IAAMvC,SAAS,CAC3CG,UAAU,GACVC,SAAS,GACTC,cAAc,GACdC,SAAS,GACTC,KAAK,GACLC,MAAM,GACNC,MAAM,KAVgC,mBAGnCC,EAHmC,KAGzBC,EAHyB,KA4BpCC,EAAc,WACfV,GAAU,IAGTW,EAAc,SAACC,GACjBH,EAAY,2BAAID,GAAL,kBAAgBI,EAAMC,OAAOC,KAAMF,EAAMC,OAAOE,UAU/D,OACI,gCACE,cAACC,EAAA,EAAD,CAAQsB,KAAK,QAASpB,MAAM,UAAUC,QA/BpB,WACpBoB,QAAQC,IAAI3C,EAAM4C,QACjBhC,EAAY,CACTR,UAAWJ,EAAM4C,OAAOC,KAAKzC,UAC7BC,SAAUL,EAAM4C,OAAOC,KAAKxC,SAC5BC,cAAeN,EAAM4C,OAAOC,KAAKvC,cACjCC,SAAUP,EAAM4C,OAAOC,KAAKtC,SAC5BC,KAAMR,EAAM4C,OAAOC,KAAKrC,KACxBC,MAAOT,EAAM4C,OAAOC,KAAKpC,MACzBC,MAAOV,EAAM4C,OAAOC,KAAKnC,QAE5BP,GAAU,IAoBT,kBAGA,eAACoB,EAAA,EAAD,CACEC,KAAMtB,EACNuB,QAASZ,EACTa,kBAAgB,qBAChBC,mBAAiB,2BAJnB,UAME,cAACC,EAAA,EAAD,CAAaC,GAAG,qBAAhB,2BACA,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CACAC,WAAS,EACTf,KAAM,YACNC,MAAOP,EAASP,UAChB6B,SAAUnB,EACVoB,OAAO,QACPC,MAAM,aACNC,WAAS,IAET,cAACL,EAAA,EAAD,CACAd,KAAM,WACNC,MAAOP,EAASN,SAChB4B,SAAUnB,EACVoB,OAAO,QACPC,MAAM,YACNC,WAAS,IAET,cAACL,EAAA,EAAD,CACAd,KAAM,gBACNC,MAAOP,EAASL,cAChB2B,SAAUnB,EACVoB,OAAO,QACPC,MAAM,iBACNC,WAAS,IAET,cAACL,EAAA,EAAD,CACAd,KAAM,WACNC,MAAOP,EAASJ,SAChB0B,SAAUnB,EACVoB,OAAO,QACPC,MAAM,YACNC,WAAS,IAET,cAACL,EAAA,EAAD,CACAd,KAAM,OACNC,MAAOP,EAASH,KAChByB,SAAUnB,EACVoB,OAAO,QACPC,MAAM,OACNC,WAAS,IAET,cAACL,EAAA,EAAD,CACAd,KAAM,QACNC,MAAOP,EAASF,MAChBwB,SAAUnB,EACVoB,OAAO,QACPC,MAAM,WACNC,WAAS,IAET,cAACL,EAAA,EAAD,CACAd,KAAM,QACNC,MAAOP,EAASD,MAChBuB,SAAUnB,EACVoB,OAAO,QACPC,MAAM,eACNC,WAAS,OAGb,eAACC,EAAA,EAAD,WACE,cAAClB,EAAA,EAAD,CAAQG,QAAST,EAAaQ,MAAM,UAApC,sBAGA,cAACF,EAAA,EAAD,CAAQG,QAhFI,WAClBtB,EAAM8C,eAAe9C,EAAM4C,OAAOC,KAAKE,MAAM,GAAGC,KAAMrC,GACtDE,KA8EuCQ,MAAM,UAAUW,WAAS,EAA1D,4B,6BCnHC,SAASiB,EAAYjD,GAAQ,IAAD,EAEXC,oBAAS,GAFE,mBAEhCC,EAFgC,KAExBC,EAFwB,OAGfF,mBAAS,IAAIiD,MAHE,mBAGhCC,EAHgC,KAG1BC,EAH0B,OAIPnD,mBAAS,CACrCkD,KAAM,GACNE,SAAU,GACV1C,SAAUX,EAAM4C,OAAO1B,MACvBoC,SAAU,KARyB,mBAIhCC,EAJgC,KAItBC,EAJsB,KAqBjC3C,EAAc,WAClBV,GAAU,IAGNW,EAAc,SAACC,GACjByC,EAAY,2BAAID,GAAL,kBAAgBxC,EAAMC,OAAOC,KAAMF,EAAMC,OAAOE,UAc/D,OACI,gCACE,cAACC,EAAA,EAAD,CAASE,MAAM,UAAUoC,SAAS,QAAQnC,QA/BxB,WACpBkC,EAAY,CACRL,KAAM,GACNG,SAAU,GACVD,SAAU,GACV1C,SAAUX,EAAM4C,OAAOC,KAAKE,MAAM,GAAGC,OAE3C7C,GAAU,IAwBN,SACE,cAAC,IAAD,MAEF,eAACoB,EAAA,EAAD,CACEC,KAAMtB,EACNuB,QAASZ,EACTa,kBAAgB,qBAChBC,mBAAiB,2BAJnB,UAME,cAACC,EAAA,EAAD,CAAaC,GAAG,qBAAhB,0BACA,eAACC,EAAA,EAAD,WAII,cAAC,IAAD,CACID,GAAG,OACH6B,SAAS,OACTzB,SAAU,SAACkB,GAAD,OA9BR,SAACA,GACfC,EAAQD,GACRK,EAAY,2BAAID,GAAL,IAAeJ,KAAMA,EAAKQ,iBA4BLC,CAAUT,IAC9BlC,KAAK,OACLC,MAAOiC,IAEX,cAACpB,EAAA,EAAD,CACAd,KAAM,WACNC,MAAOqC,EAASF,SAChBpB,SAAUnB,EACVoB,OAAO,QACPC,MAAM,WACNC,WAAS,IAET,cAACL,EAAA,EAAD,CACAd,KAAM,WACNC,MAAOqC,EAAS5C,SAChBsB,SAAUnB,EACVoB,OAAO,QACPC,MAAM,WACNC,WAAS,IAET,cAACL,EAAA,EAAD,CACAd,KAAM,WACNC,MAAOqC,EAASD,SAChBrB,SAAUnB,EACVoB,OAAO,QACPC,MAAM,WACNC,WAAS,OAIb,eAACC,EAAA,EAAD,WACE,cAAClB,EAAA,EAAD,CAAQG,QAAST,EAAaQ,MAAM,UAApC,oBAGA,cAACF,EAAA,EAAD,CAAQG,QA1DA,WACdtB,EAAM6D,YAAYN,GAClB1C,KAwDmCQ,MAAM,UAAUW,WAAS,EAAtD,2BC9FC,SAAS8B,IAAgB,IAAD,EACD7D,mBAAS,IADR,mBAC5B8D,EAD4B,KACjBC,EADiB,OAEP/D,oBAAS,GAFF,mBAE5BC,EAF4B,KAEpBC,EAFoB,OAGLF,mBAAS,IAHJ,mBAG5BgE,EAH4B,KAGnBC,EAHmB,KAI7BC,EAAUC,mBACVC,EAAkB,mDACxBC,qBAAU,WACNC,MAEF,IAEF,IAAMA,EAAc,WAChBC,MAAMH,GACLI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA5B,GAAI,OAAImB,EAAanB,EAAK+B,YAC/BC,OAAM,SAAAC,GAAK,OAAIpC,QAAQC,IAAImC,OAgB1BC,EAAiB,SAACC,EAAMrE,GAC1B6D,MAAMQ,EAAM,CACRC,OAAO,MACPC,QAAS,CAAC,eAAgB,oBAC1BC,KAAKC,KAAKC,UAAU1E,KAEnB8D,MAAK,SAAAa,GAAC,OAAIf,OACVE,MAAK,SAAAa,GACFpB,EAAW,wCACX/D,GAAU,MAEb0E,OAAM,SAAAU,GAAG,OAAI7C,QAAQoC,MAAMS,OAiB9B1B,EAAc,SAACA,GACjBW,MAAM,mDAAoD,CACtDS,OAAQ,OACRC,QAAS,CAAC,eAAiB,oBAC3BC,KAAMC,KAAKC,UAAU,CACjB,KAAQxB,EAAYV,KACpB,SAAYU,EAAYR,SACxB,SAAYQ,EAAYP,SACxB,SAAYO,EAAYlD,aAG/B8D,MAAK,SAAAa,GAAC,OAAIpB,EAAW,sBACrBO,MAAK,SAAAa,GAAC,OAAInF,GAAU,MACpB0E,OAAM,SAAAC,GAAK,OAAIpC,QAAQoC,MAAMA,OAO5BU,EAAU,CACZ,CAACC,WAAY,YAAaC,MAAM,YAAaC,UAAU,EAAMC,gBAAgB,EAAKC,QAAO,GACzF,CAACJ,WAAY,WAAYC,MAAM,WAAYC,UAAU,EAAKC,gBAAgB,EAAMC,QAAQ,GACxF,CAACJ,WAAY,kBAAmBC,MAAM,gBAAiBC,UAAU,EAAKC,gBAAgB,EAAMC,QAAQ,GACpG,CAACJ,WAAY,WAAYC,MAAM,WAAYC,UAAU,EAAMC,gBAAgB,EAAKC,QAAQ,GACxF,CAACJ,WAAY,OAAQC,MAAM,OAAQC,UAAU,EAAMC,gBAAgB,EAAKC,QAAQ,GAChF,CAACJ,WAAY,QAASC,MAAM,QAASC,UAAU,EAAKC,gBAAgB,EAAMC,QAAQ,GAClF,CAACJ,WAAY,QAASC,MAAM,QAASC,UAAU,EAAMC,gBAAgB,EAAKC,QAAQ,GAClF,CACIJ,WAAY,YACZK,MAAM,IACNJ,MAAO,UACPK,sBAAuB,SAAAnD,GAAM,OAAO,cAACK,EAAD,CACIY,YAAaA,EACbjB,OAAQA,MAEpD,CACI6C,WAAY,GACZK,MAAM,IACNJ,MAAM,gBACNK,sBAAuB,SAAAnD,GAAM,OAAI,cAACL,EAAD,CAAgBO,eAAgBiC,EAAgBnC,OAAQA,MAI7F,CACI6C,WAAY,GACZC,MAAM,gBACNI,MAAO,IACPC,sBAAuB,SAAAnD,GAAM,OAAI,eAACzB,EAAA,EAAD,CACDE,MAAM,YACNoB,KAAK,SACLnB,QAAS,kBAjEzB0E,EAiE4CpD,EAAOC,KAAKE,MAAM,GAAGC,UAhElFiD,OAAOC,QAAQ,kBACd1B,MAAMwB,EAAY,CACdf,OAAO,WAETR,MAAK,SAAAa,GAAC,OAAIf,OACVE,MAAK,SAAAa,GACFpB,EAAW,iCACX/D,GAAU,MAEb0E,OAAM,SAAAC,GAAK,OAAIpC,QAAQC,IAAImC,OAVd,IAACkB,GA8DiB,cAIC,cAAC,IAAD,UAM1C,OACI,gCACI,qBAAKG,MAAO,CAACC,UAAU,UAAvB,SACC,cAACrG,EAAD,CAAauC,YAvGF,SAACA,GACjBkC,MAAMH,EAAgB,CAClBY,OAAQ,OACRC,QAAS,CAAC,eAAiB,oBAC3BC,KAAMC,KAAKC,UAAU/C,KAExBmC,MAAK,SAAAa,GAAC,OAAIf,OACVE,MAAK,SAAAa,GACFpB,EAAW,mCACX/D,GAAU,MAEb0E,OAAM,SAAAC,GAAK,OAAIpC,QAAQC,IAAImC,WA8FxB,sBAAKuB,UAAU,oBAAoBF,MAAO,CAACG,OAAO,QAASR,MAAM,MAAOS,WAAW,KAAnF,UACI,cAAC,cAAD,CACIC,IAAKrC,EACLsC,YAAa,SAAA7D,GACTuB,EAAQuC,QAAU9D,EAAO+D,KAE7BC,WAAcpB,EACdqB,QAAS9C,EACT+C,YAAY,EACZC,mBAAoB,GACpBC,mBAAmB,IAIvB,cAACC,EAAA,EAAD,CACIzF,KAAMtB,EACNgH,iBAAkB,IAClBzF,QAhEI,WAChBtB,GAAU,IAgEE8D,QAASA,U,qEC3Id,SAASkD,IAAU,IAAD,EAEClH,oBAAS,GAFV,mBAEtBmH,EAFsB,KAEbC,EAFa,KAGvBC,EAAc,CAEhB,CACIC,MAAM,OACNC,KAAK,IACLC,KAAM,cAAC,IAAD,IACNC,MAAM,YAEV,CACIH,MAAM,YACNC,KAAK,aACLC,KAAM,cAAC,IAAD,IACNC,MAAM,YAEV,CACIH,MAAM,YACNC,KAAK,YACLC,KAAM,cAAC,IAAD,IACNC,MAAM,YAEV,CACIH,MAAM,WACNC,KAAK,YACLC,KAAM,cAAC,IAAD,IACNC,MAAM,YAEV,CACIH,MAAM,aACNC,KAAK,cACLC,KAAM,cAAC,IAAD,IACNC,MAAM,aAIRC,EAAa,WACfN,GAAYD,IAEhB,OACI,mCACA,eAAC,IAAYQ,SAAb,CAAsB1G,MAAO,CAACG,MAAM,QAApC,UACA,sBAAKgF,UAAU,SAAf,UAEI,cAAC,IAAD,CAAMwB,GAAG,IAAIxB,UAAU,YAAvB,SACI,cAAC,IAAD,CAAgB/E,QAASqG,MAK5B,qBAAIxB,MAAO,CAACjE,OAAO,QAASb,MAAM,SAAlC,UAA6C,cAAC,IAAD,CAAY8E,MAAO,CAAC9E,MAAM,WAAvE,yBAGJ,qBAAKgF,UAAWe,EAAU,kBAAoB,WAA9C,SACG,qBAAIf,UAAU,iBAAiB/E,QAASqG,EAAxC,UACI,oBAAItB,UAAU,gBAAd,SACI,cAAC,IAAD,CAAMwB,GAAG,IAAIxB,UAAU,YAAvB,SACI,cAAC,IAAD,QAGPiB,EAAYQ,KAAI,SAACC,EAAMC,GACpB,OACI,oBAAgB3B,UAAW0B,EAAKL,MAAhC,SACI,eAAC,IAAD,CAAMG,GAAIE,EAAKP,KAAf,UACKO,EAAKN,KACN,+BAAOM,EAAKR,YAHXS,gB,qBC/DlB,SAASC,EAAgBjI,GAAQ,IAAD,EACTC,mBAAS,IADA,mBACpCiI,EADoC,KACzBC,EADyB,OAEflI,oBAAS,GAFM,mBAEpCC,EAFoC,KAE5BC,EAF4B,OAGbF,mBAAS,IAHI,mBAGpCgE,EAHoC,KAG3BC,EAH2B,KAM3CI,qBAAU,WACN8D,MACD,IAEH,IAAMjE,EAAUC,mBAEVgE,EAAe,WACjB5D,MAAM,mDACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA5B,GAAI,OAAIsF,EAAatF,MAC1BgC,OAAM,SAAAU,GAAG,OAAI7C,QAAQoC,MAAMS,OAkB1BC,EAAU,CACZ,CACIC,WAAY,GACZC,MAAM,KACNI,MAAO,IACPC,sBAAuB,SAAAnD,GAAM,OAAI,eAACzB,EAAA,EAAD,CACDE,MAAM,YACNoB,KAAK,SACLnB,QAAU,kBAvBzBO,EAuB8Ce,EAAO1B,MAtB1EwB,QAAQC,IAAId,QACToE,OAAOC,QAAQ,oCACd1B,MAAM,oDAAsD3C,EAAI,CAC5DoD,OAAQ,WAEXR,MAAK,SAAAa,GAAC,OAAI8C,OACV3D,MAAK,SAAAa,GACFpB,EAAW,yCACX/D,GAAU,MAEb0E,OAAM,SAAAU,GAAG,OAAI7C,QAAQoC,MAAMS,OAXZ,IAAC1D,GAoBgB,cAIC,cAAC,IAAD,SAKtC,CAAI4D,WAAY,WAAYC,MAAO,WAAYC,UAAU,EAAMC,gBAAgB,EAAKC,QAAQ,EAAOwC,WAAW,GAE9G,CAAI5C,WAAY,OAAQC,MAAO,OAAQK,sBAAuB,SAAAnD,GAAM,OAAI0F,IAAOC,IAAI3F,EAAO1B,OAAOsH,OAAO,wBAExG,CAAC/C,WAAY,WAAYC,MAAM,WAAYC,UAAU,EAAMC,gBAAgB,EAAKC,QAAQ,GACxF,CACIJ,WAAY,WACZM,sBAAuB,SAAAnD,GAAM,OAAKA,EAAOC,KAAKlC,SAASP,UAAY,IAAMwC,EAAOC,KAAKlC,SAASN,UAC9FsF,UAAU,EACVC,gBAAgB,EAChBC,QAAQ,EACRwC,WAAW,IASnB,OACI,8BAEI,sBAAKhC,UAAU,oBAAoBF,MAAO,CAACG,OAAO,QAASR,MAAM,MAAO5D,OAAQ,SAAhF,UACI,cAAC,cAAD,CACIsE,IAAKrC,EACLsC,YAAc,SAAA7D,GACVuB,EAAQuC,QAAU9D,EAAO+D,IACzB/D,EAAO+D,IAAI8B,oBAEf7B,WAAYpB,EACZkD,uBAAuB,EACvB7B,QAASqB,EACTpB,YAAY,EACZC,mBAAoB,KAGxB,cAACE,EAAA,EAAD,CACIzF,KAAMtB,EACNgH,iBAAkB,IAClBzF,QAxBI,WAChBtB,GAAU,IAwBE8D,QAASA,S,oBC9Fd,SAAS0E,IAAe,IAAD,IAGA1I,mBAAS,IAHT,mBAG3BiI,EAH2B,KAGhBC,EAHgB,KAKlC7D,qBAAU,WACNsE,MACD,CAACV,IAEJ,IAAMU,EAAa,WACfpE,MAAM,kDAAmD,CACrDS,OAAQ,QAEXR,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA5B,GAAI,OAAIsF,EAAatF,MAC1B4B,MAAK,SAAAa,GAAC,OAAI5C,QAAQC,IAAIuF,MACtBrD,OAAM,SAAAU,GAAG,OAAI7C,QAAQoC,MAAMS,OAGhC,OACI,qBAAKY,MAAO,CAACI,WAAW,IAAKsC,YAAY,IAAzC,SACI,cAAC,KAAD,GACAC,QAAS,CAAEC,KACXzC,OAAO,OACP0C,YAAY,eACZC,cAAe,CACXC,KAAK,mBACLC,OAAO,QACPC,MAAO,0CAPX,4BASY,gBATZ,uBAUQlB,EAAUJ,KAAI,SAACC,GACnB,MAAO,CACPR,MAAOQ,EAAK1E,SAAW,MAAO0E,EAAKpH,SAASP,UAAU,IAAI2H,EAAKpH,SAASN,SACxE8C,KAAM4E,EAAK5E,KACXG,SAAUyE,EAAKzE,cAdnB,MCxBG,SAAS+F,IACtB,OACE,qBAAKlD,MAAO,CAACI,WAAW,KAAxB,SACG,+D,mBCkBQ8C,MAff,WACE,OACE,sBAAKhD,UAAU,MAAf,UACI,cAACc,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOK,KAAK,IAAI8B,OAAK,EAACC,UAAYzF,IAClC,cAAC,IAAD,CAAO0D,KAAM,YAAY+B,UAAWC,IACpC,cAAC,IAAD,CAAOhC,KAAM,aAAa+B,UAAazF,IACvC,cAAC,IAAD,CAAO0D,KAAM,YAAY+B,UAAaE,IACtC,cAAC,IAAD,CAAOjC,KAAM,cAAc+B,UAAaG,IACxC,cAAC,IAAD,CAAOC,OAAQ,kBAAM,6DCRhBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBrF,MAAK,YAAkD,IAA/CsF,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAAST,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFU,SAASC,eAAe,SAM1BV,M","file":"static/js/main.808afdc3.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { TextField } from '@material-ui/core';\r\n\r\nexport default function AddCustomer(props) {\r\n\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [customer, setCustomer] = useState({\r\n        firstname: '',\r\n        lastname: '',\r\n        streetaddress: '',\r\n        postcode: '',\r\n        city: '',\r\n        email: '',\r\n        phone: '',\r\n    });\r\n\r\n    const handleClickOpen = () => {\r\n      setIsOpen(true);\r\n    };\r\n  \r\n    const handleClose = () => {\r\n      setIsOpen(false);\r\n    };\r\n\r\n    const inputChanged =(event)=> {\r\n        setCustomer({...customer, [event.target.name]:event.target.value})\r\n    }\r\n\r\n\r\n    const handleSave =()=> {        \r\n        props.newCustomer(customer);\r\n        handleClose();\r\n    }\r\n  \r\n    return (\r\n        <div>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={handleClickOpen}>\r\n            Add a New Customer\r\n          </Button>\r\n          <Dialog\r\n            open={isOpen}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n          >\r\n            <DialogTitle id=\"alert-dialog-title\">Add New Customer</DialogTitle>\r\n            <DialogContent>\r\n                \r\n                <TextField\r\n                autoFocus\r\n                name =\"firstname\"\r\n                value={customer.firstname}\r\n                onChange={inputChanged}\r\n                margin=\"dense\"\r\n                label=\"Firstname\"\r\n                fullWidth\r\n                />\r\n                <TextField\r\n                name =\"lastname\"\r\n                value={customer.lastname}\r\n                onChange={inputChanged}\r\n                margin=\"dense\"\r\n                label=\"Lastname\"\r\n                fullWidth\r\n                />\r\n                <TextField\r\n                name =\"streetaddress\"\r\n                value={customer.streetaddress}\r\n                onChange={inputChanged}\r\n                margin=\"dense\"\r\n                label=\"Street Address\"\r\n                fullWidth\r\n                />\r\n                <TextField\r\n                name =\"postcode\"\r\n                value={customer.postcode}\r\n                onChange={inputChanged}\r\n                margin=\"dense\"\r\n                label=\"Postcode\"\r\n                fullWidth\r\n                />\r\n                <TextField\r\n                name =\"city\"\r\n                value={customer.city}\r\n                onChange={inputChanged}\r\n                margin=\"dense\"\r\n                label=\"City\"\r\n                fullWidth\r\n                />\r\n                <TextField\r\n                name =\"email\"\r\n                value={customer.email}\r\n                onChange={inputChanged}\r\n                margin=\"dense\"\r\n                label=\"Email\"\r\n                fullWidth\r\n                />\r\n                 <TextField\r\n                name =\"phone\"\r\n                value={customer.phone}\r\n                onChange={inputChanged}\r\n                margin=\"dense\"\r\n                label=\"Phone\"\r\n                fullWidth\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={handleClose} color=\"primary\">\r\n                Cancel\r\n              </Button>\r\n              <Button onClick={handleSave} color=\"primary\" autoFocus>\r\n                Save\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </div>\r\n      );\r\n}","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { TextField } from '@material-ui/core';\r\n\r\n\r\nexport default function ModifyCustomer(props) {\r\n\r\n    const [isOpen, setIsOpen] = React.useState(false);\r\n    const [customer, setCustomer] = React.useState({\r\n        firstname:'', \r\n        lastname:'', \r\n        streetaddress:'', \r\n        postcode:'',\r\n        city:'',\r\n        email:'',\r\n        phone:'',\r\n        \r\n    });\r\n\r\n    const handleClickOpen = () => {\r\n        console.log(props.params)\r\n         setCustomer({\r\n            firstname: props.params.data.firstname,\r\n            lastname: props.params.data.lastname,\r\n            streetaddress: props.params.data.streetaddress,\r\n            postcode: props.params.data.postcode,\r\n            city: props.params.data.city,\r\n            email: props.params.data.email,\r\n            phone: props.params.data.phone\r\n        }) \r\n         setIsOpen(true);\r\n    };\r\n  \r\n    const handleClose = () => {\r\n         setIsOpen(false);\r\n    };\r\n\r\n    const inputChanged =(event)=> {\r\n        setCustomer({...customer, [event.target.name]:event.target.value})\r\n\r\n    }\r\n\r\n\r\n    const updateCustomer =()=> {        \r\n        props.updateCustomer(props.params.data.links[0].href, customer);\r\n        handleClose();\r\n    }\r\n  \r\n    return (\r\n        <div>\r\n          <Button size=\"small\"  color=\"primary\" onClick={handleClickOpen}>\r\n            Edit\r\n          </Button>\r\n          <Dialog\r\n            open={isOpen}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n          >\r\n            <DialogTitle id=\"alert-dialog-title\">Edit Customer</DialogTitle>\r\n            <DialogContent>\r\n                <TextField\r\n                autoFocus\r\n                name =\"firstname\"\r\n                value={customer.firstname}\r\n                onChange={inputChanged}\r\n                margin=\"dense\"\r\n                label=\"First Name\"\r\n                fullWidth\r\n                />\r\n                <TextField\r\n                name =\"lastname\"\r\n                value={customer.lastname}\r\n                onChange={inputChanged}\r\n                margin=\"dense\"\r\n                label=\"Last Name\"\r\n                fullWidth\r\n                />\r\n                <TextField\r\n                name =\"streetaddress\"\r\n                value={customer.streetaddress}\r\n                onChange={inputChanged}\r\n                margin=\"dense\"\r\n                label=\"street Address\"\r\n                fullWidth\r\n                />\r\n                <TextField\r\n                name =\"postcode\"\r\n                value={customer.postcode}\r\n                onChange={inputChanged}\r\n                margin=\"dense\"\r\n                label=\"Post Code\"\r\n                fullWidth\r\n                />\r\n                <TextField\r\n                name =\"city\"\r\n                value={customer.city}\r\n                onChange={inputChanged}\r\n                margin=\"dense\"\r\n                label=\"city\"\r\n                fullWidth\r\n                />\r\n                <TextField\r\n                name =\"email\"\r\n                value={customer.email}\r\n                onChange={inputChanged}\r\n                margin=\"dense\"\r\n                label=\"Email Id\"\r\n                fullWidth\r\n                />\r\n                <TextField\r\n                name =\"phone\"\r\n                value={customer.phone}\r\n                onChange={inputChanged}\r\n                margin=\"dense\"\r\n                label=\"Phone Number\"\r\n                fullWidth\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={handleClose} color=\"primary\">\r\n                Disagree\r\n              </Button>\r\n              <Button onClick={updateCustomer} color=\"primary\" autoFocus>\r\n                Agree\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </div>\r\n      );\r\n}","import React, {useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport {BsFillPlusCircleFill} from 'react-icons/bs';\r\n\r\nimport DateTimePicker from 'react-datetime-picker';\r\n\r\nimport { TextField } from '@material-ui/core';\r\n\r\nexport default function AddTraining(props) {\r\n\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [date, setDate] = useState(new Date());\r\n    const [training, setTraining] = useState({\r\n        date: '',\r\n        activity: '',\r\n        customer: props.params.value,\r\n        duration: '',\r\n        });\r\n\r\n    const handleClickOpen = () => {\r\n        setTraining({\r\n            date: '',\r\n            duration: '',\r\n            activity: '',\r\n            customer: props.params.data.links[1].href,\r\n        })\r\n      setIsOpen(true);\r\n    };\r\n  \r\n    const handleClose = () => {\r\n      setIsOpen(false);\r\n    };\r\n\r\n    const inputChanged =(event)=> {\r\n        setTraining({...training, [event.target.name]:event.target.value})\r\n\r\n    }\r\n    const inputDate = (date) => {\r\n        setDate(date);\r\n        setTraining({...training, date: date.toISOString()});\r\n    }\r\n\r\n\r\n    const handleSave =()=> {        \r\n        props.addTraining(training);\r\n        handleClose();\r\n    }\r\n  \r\n    return (\r\n        <div>\r\n          <Button  color=\"primary\" fontSize=\"small\" onClick={handleClickOpen}>\r\n            <BsFillPlusCircleFill />\r\n          </Button>\r\n          <Dialog\r\n            open={isOpen}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n          >\r\n            <DialogTitle id=\"alert-dialog-title\">Add Training</DialogTitle>\r\n            <DialogContent>\r\n                \r\n                    \r\n                \r\n                <DateTimePicker\r\n                    id=\"date\"\r\n                    required=\"true\"\r\n                    onChange={(date) => inputDate(date)}\r\n                    name=\"date\"                         \r\n                    value={date}\r\n                />\r\n                <TextField\r\n                name =\"activity\"\r\n                value={training.activity}\r\n                onChange={inputChanged}\r\n                margin=\"dense\"\r\n                label=\"Activity\"\r\n                fullWidth\r\n                />\r\n                <TextField\r\n                name =\"customer\"\r\n                value={training.customer}\r\n                onChange={inputChanged}\r\n                margin=\"dense\"\r\n                label=\"Customer\"\r\n                fullWidth\r\n                />\r\n                <TextField\r\n                name =\"duration\"\r\n                value={training.duration}\r\n                onChange={inputChanged}\r\n                margin=\"dense\"\r\n                label=\"Duration\"\r\n                fullWidth\r\n                />\r\n                \r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={handleClose} color=\"primary\">\r\n                Cancel\r\n              </Button>\r\n              <Button onClick={handleSave} color=\"primary\" autoFocus>\r\n                Save\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </div>\r\n      );\r\n}","import React, { useEffect, useState, useRef} from 'react';\r\nimport {AgGridColumn, AgGridReact} from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-material.css'\r\nimport Button from '@material-ui/core/Button';\r\nimport { Snackbar } from '@material-ui/core';\r\nimport AddCustomer from './AddCustomer';\r\nimport ModifyCustomer from './ModifyCustomer';\r\nimport {BsXCircle} from 'react-icons/bs';\r\nimport AddTraining from './AddTraining';\r\n\r\nexport default function CustomerList() {\r\n    const [customers, setCustomers] = useState([]);\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [message, setMessage] = useState('');\r\n    const gridRef = useRef();\r\n    const customerDataApi = \"https://customerrest.herokuapp.com/api/customers\";\r\n    useEffect(()=> {\r\n        getCustomer();\r\n        \r\n    },[]);\r\n\r\n    const getCustomer = ()=> {\r\n        fetch(customerDataApi)\r\n        .then(response => response.json())\r\n        .then(data => setCustomers(data.content))\r\n        .catch(error => console.log(error))\r\n    }\r\n    const newCustomer = (newCustomer) => {\r\n        fetch(customerDataApi,{\r\n            method: 'POST',\r\n            headers: {'Content-Type' : 'application/json'},\r\n            body: JSON.stringify(newCustomer)\r\n        })\r\n        .then(_ => getCustomer())\r\n        .then(_ => {\r\n            setMessage('New Customer added successfully')\r\n            setIsOpen(true)\r\n        })\r\n        .catch(error => console.log(error))\r\n    }\r\n\r\n    const modifyCustomer = (link, customer) => {\r\n        fetch(link, {\r\n            method:'PUT',\r\n            headers: {'Content-type': 'application/json'},\r\n            body:JSON.stringify(customer)\r\n        })\r\n            .then(_ => getCustomer())\r\n            .then(_ => {\r\n                setMessage(' Customer data modified successfully')\r\n                setIsOpen(true)\r\n            })\r\n            .catch(err => console.error(err))\r\n    }\r\n\r\n    const deleteCustomer = (deleteLink) => {\r\n        if(window.confirm('Are you sure?')){\r\n            fetch(deleteLink, {\r\n                method:'DELETE' \r\n             })\r\n             .then(_ => getCustomer())\r\n             .then(_ => {\r\n                 setMessage('Customer removed successfully')\r\n                 setIsOpen(true)\r\n             })\r\n             .catch(error => console.log(error)) \r\n        }       \r\n    }\r\n\r\n    const addTraining = (addTraining) => {\r\n        fetch('https://customerrest.herokuapp.com/api/trainings', {\r\n            method: 'POST',\r\n            headers: {'Content-type' : 'application/json'},\r\n            body: JSON.stringify({\r\n                \"date\": addTraining.date,\r\n                \"activity\": addTraining.activity,\r\n                \"duration\": addTraining.duration,\r\n                \"customer\": addTraining.customer\r\n            })\r\n        })\r\n        .then(_ => setMessage('Training added!'))\r\n        .then(_ => setIsOpen(true))\r\n        .catch(error => console.error(error))\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setIsOpen(false);\r\n    }\r\n\r\n    const columns = [\r\n        {headerName: 'Firstname', field:'firstname', sortable: true, floatingFilter: true,filter:true},\r\n        {headerName: 'Lastname', field:'lastname', sortable: true,floatingFilter: true, filter: true},\r\n        {headerName: 'Street addresss', field:'streetaddress', sortable: true,floatingFilter: true, filter: true},\r\n        {headerName: 'Postcode', field:'postcode', sortable: true, floatingFilter: true,filter: true},\r\n        {headerName: 'City', field:'city', sortable: true, floatingFilter: true,filter: true},\r\n        {headerName: 'Email', field:'email', sortable: true,floatingFilter: true, filter: true},\r\n        {headerName: 'Phone', field:'phone', sortable: true, floatingFilter: true,filter: true},\r\n        {\r\n            headerName: 'Trainings',\r\n            width:120,      \r\n            field: 'content',\r\n            cellRendererFramework: params =>    <AddTraining \r\n                                                    addTraining={addTraining} \r\n                                                    params={params}/>\r\n      },\r\n        {\r\n            headerName: '', \r\n            width:100,\r\n            field:'links[1].href', \r\n            cellRendererFramework: params => <ModifyCustomer updateCustomer={modifyCustomer} params={params} />\r\n            },\r\n       \r\n       \r\n        {\r\n            headerName: '', \r\n            field:'links[1].href',\r\n            width: 100,\r\n            cellRendererFramework: params => <Button \r\n                                            color=\"secondary\" \r\n                                            size=\"medium\" \r\n                                            onClick={()=>deleteCustomer(params.data.links[0].href)}\r\n                                            > <BsXCircle />\r\n                                            </Button>\r\n            },\r\n            \r\n    ]\r\n    \r\n    return (\r\n        <div>\r\n            <div style={{textAlign:'center'}}>\r\n             <AddCustomer newCustomer={newCustomer} />\r\n            </div>\r\n            <div className=\"ag-theme-material\" style={{height:'600px', width:'80%', marginLeft:250}}>\r\n                <AgGridReact\r\n                    ref={gridRef}\r\n                    onGridReady={params => {\r\n                        gridRef.current = params.api;                    \r\n                     }}\r\n                    columnDefs = {columns}\r\n                    rowData={customers}\r\n                    pagination={true}\r\n                    paginationPageSize={10}\r\n                    suppressSizeToFit={true}\r\n                   \r\n                >      \r\n                </AgGridReact>  \r\n                <Snackbar\r\n                    open={isOpen}\r\n                    autoHideDuration={6000}\r\n                    onClose={handleClose}\r\n                    message={message}\r\n                />\r\n            </div> \r\n      </div> \r\n    );\r\n\r\n}","import React, {useState} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../App.css';\r\nimport * as FaIcons from \"react-icons/fa\";\r\nimport * as AiIcons from 'react-icons/ai';\r\nimport * as IoIcons from 'react-icons/io';\r\nimport {BsFillPersonFill} from 'react-icons/bs';\r\nimport { GiMuscleUp } from \"react-icons/gi\";\r\nimport './Navbar.css';\r\nimport {IconContext} from 'react-icons'\r\n\r\n\r\nexport default function NavBar() {\r\n\r\n    const [sidebar, setSidebar] = useState(false);\r\n    const SidebarData = [\r\n\r\n        {\r\n            title:'Home',\r\n            path:'/',\r\n            icon: <AiIcons.AiFillHome/>,\r\n            cName:'nav-text'\r\n        },\r\n        {\r\n            title:'Customers',\r\n            path:'/customers',\r\n            icon: <BsFillPersonFill/>,\r\n            cName:'nav-text'\r\n        },\r\n        {\r\n            title:'Trainings',\r\n            path:'/training',\r\n            icon: <IoIcons.IoMdFitness/>,\r\n            cName:'nav-text'\r\n        },\r\n        {\r\n            title:'Calendar',\r\n            path:'/calendar',\r\n            icon: <IoIcons.IoMdCalendar/>,\r\n            cName:'nav-text'\r\n        },\r\n        {\r\n            title:'Statistics',\r\n            path:'/statistics',\r\n            icon: <IoIcons.IoMdStats/>,\r\n            cName:'nav-text'\r\n        }\r\n    ]\r\n\r\n    const showSidebar =()=> {\r\n        setSidebar(!sidebar)\r\n    }\r\n    return (        \r\n        <>\r\n        <IconContext.Provider value={{color:'#fff'}}>\r\n        <div className=\"navbar\">\r\n            \r\n            <Link to=\"#\" className='menu-bars'>\r\n                <FaIcons.FaBars onClick={showSidebar}/>\r\n                \r\n            </Link>\r\n            \r\n             \r\n             <h1 style={{margin:'200px', color:'white'}} ><GiMuscleUp style={{color:'green'}} /> Peronal Trainer</h1>\r\n            \r\n        </div>\r\n         <nav className={sidebar ? 'nav-menu active' : 'nav-menu'}>\r\n            <ul className=\"nav-menu-items\" onClick={showSidebar}>\r\n                <li className=\"navbar-toggle\">\r\n                    <Link to=\"#\" className=\"menu-bars\">\r\n                        <AiIcons.AiOutlineClose/>\r\n                    </Link>\r\n                </li>\r\n                {SidebarData.map((item, index) => {\r\n                    return (\r\n                        <li key={index} className={item.cName}>\r\n                            <Link to={item.path}>\r\n                                {item.icon}\r\n                                <span>{item.title}</span>\r\n                            </Link>\r\n                        </li>\r\n                    )\r\n                })}\r\n            </ul>\r\n\r\n        </nav>\r\n        \r\n        </IconContext.Provider>\r\n      \r\n        </>\r\n        \r\n    )\r\n}","import React, { useState, useEffect, useRef } from 'react';\r\n\r\nimport {AgGridColumn, AgGridReact} from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-material.css'\r\n\r\nimport { Snackbar } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport {BsXCircle} from 'react-icons/bs'\r\n\r\nimport moment from 'moment';\r\n\r\nexport default function Trainingslist  (props) {\r\n    const [trainings, setTrainings] = useState([]);\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [message, setMessage] = useState('');\r\n    \r\n\r\n    useEffect(() => {\r\n        getTrainings();\r\n    }, [])\r\n\r\n    const gridRef = useRef();\r\n\r\n    const getTrainings = () => {\r\n        fetch('https://customerrest.herokuapp.com/gettrainings')\r\n        .then(response => response.json())\r\n        .then(data => setTrainings(data))\r\n        .catch(err => console.error(err))\r\n    }\r\n\r\n    const deleteTrainings = (id) => {\r\n        console.log(id);\r\n        if(window.confirm('You want to DELET the Training?')){\r\n            fetch('https://customerrest.herokuapp.com/api/trainings/' + id, {\r\n                method: 'DELETE'\r\n            })\r\n            .then(_ => getTrainings())\r\n            .then(_ => {\r\n                setMessage('Training has been succesfully deleted')\r\n                setIsOpen(true)\r\n            })\r\n            .catch(err => console.error(err))\r\n        } \r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            headerName: '', \r\n            field:'id',\r\n            width: 100,\r\n            cellRendererFramework: params => <Button \r\n                                            color=\"secondary\" \r\n                                            size=\"medium\" \r\n                                            onClick={ ()=> deleteTrainings(params.value)}\r\n                                            > <BsXCircle />\r\n                                            </Button>\r\n            },\r\n        \r\n\r\n        {   headerName: 'Activity', field: 'activity', sortable: true, floatingFilter: true,filter: true,  resizable: true   },\r\n\r\n        {   headerName: 'Date', field: 'date', cellRendererFramework: params => moment.utc(params.value).format('DD.MM.YYYY hh:mm a')},\r\n              \r\n        {headerName: 'Duration', field:'duration', sortable: true, floatingFilter: true,filter: true},\r\n        {\r\n            headerName: 'Customer',     \r\n            cellRendererFramework: params => (params.data.customer.firstname + \" \" + params.data.customer.lastname),                \r\n            sortable: true, \r\n            floatingFilter: true, \r\n            filter: true,             \r\n            resizable: true\r\n        },\r\n       \r\n    ]\r\n\r\n    const handleClose = () => {\r\n        setIsOpen(false);\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            {/* <AddCustomer addCustomer={addCustomer}/> */}\r\n            <div className=\"ag-theme-material\" style={{height:'600px', width:'70%', margin: 'auto '}}>\r\n                <AgGridReact\r\n                    ref={gridRef}\r\n                    onGridReady={ params => {\r\n                        gridRef.current = params.api\r\n                        params.api.sizeColumnsToFit();\r\n                    }}\r\n                    columnDefs={columns}\r\n                    suppressCellSelection={true}\r\n                    rowData={trainings}\r\n                    pagination={true}\r\n                    paginationPageSize={10}\r\n                >\r\n                </AgGridReact>\r\n                <Snackbar\r\n                    open={isOpen}\r\n                    autoHideDuration={3000}\r\n                    onClose={handleClose}\r\n                    message={message}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React,{useState, useEffect} from 'react'\r\nimport FullCalendar from '@fullcalendar/react'\r\nimport dayGridPlugin from '@fullcalendar/daygrid'\r\n\r\n\r\n\r\n\r\nexport default function BigCalendar() {\r\n    \r\n    \r\n    const [trainings, setTrainings] = useState([]);\r\n\r\n    useEffect(() => {\r\n        showEvents();\r\n    }, [trainings]); \r\n\r\n    const showEvents = () => {\r\n        fetch('https://customerrest.herokuapp.com/gettrainings', {\r\n            method: 'GET'\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => setTrainings(data))\r\n        .then(_ => console.log(trainings))\r\n        .catch(err => console.error(err))\r\n    };\r\n    \r\n    return (\r\n        <div style={{marginLeft:250, marginRight:50}}>\r\n            <FullCalendar\r\n            plugins={[ dayGridPlugin ]}\r\n            height=\"80vh\"\r\n            initialView=\"dayGridMonth\"\r\n            headerToolbar={{\r\n                left:'prev,next, today',\r\n                center:'title',\r\n                right: 'dayGridMonth, dayGridWeek, dayGridDay'\r\n            }}\r\n            initialView=\"dayGridMonth\"\r\n            events={trainings.map((item) => {\r\n                return {\r\n                title: item.activity + \" , \"+ item.customer.firstname+\" \"+item.customer.lastname,\r\n                date: item.date,\r\n                duration: item.duration ,\r\n                \r\n\r\n            }\r\n            })\r\n            }\r\n        />\r\n      </div>\r\n    );\r\n}\r\n\r\n","\r\nimport React from 'react';\r\n\r\n\r\nexport default function App() {\r\n  return (\r\n    <div style={{marginLeft:300}}>\r\n       <h1> Welcome to Statistics page</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n  \r\n\r\n\r\n","\nimport CustomerList from './component/CustomerList';\nimport NavBar from './component/NavBar'\nimport TrainingList from './component/TrainingList';\nimport ShowCalendar from './component/Calendar';\nimport Statistics from './component/Statistics'\nimport {Switch, Route, Link} from 'react-router-dom';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <NavBar />\n        <Switch> \n          <Route path='/' exact component= {CustomerList}/>\n          <Route path =\"/training\" component={TrainingList}/>\n          <Route path =\"/customers\" component = {CustomerList}/>\n          <Route path =\"/calendar\" component = {ShowCalendar}/>\n          <Route path =\"/statistics\" component = {Statistics}/>\n          <Route render={() => <h1> Page not   found</h1>}/>\n        </Switch>   \n    </div>\n  );\n}\nexport default App;\n\n  \n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}